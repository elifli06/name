{"ast":null,"code":"// Bu isteğe bağlı kod service worker kullanarak uygulama içeriğinizi daha hızlı \n// yüklemeye, ayrıca çevrimdışı yetenekler de eklemeye yardımcı olur.\n// Ancak bu yaklaşım bazı tuzakları da beraberinde getirir; service worker'ların\n// yaşam döngüsü tam olarak anlaşılmazsa çalışma zamanı hatalarına neden olabilir.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] localhost için IPv6 adresidir.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 localhost için özel IPv4 adresi kabul edilir.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // URL constructor, SW'nin https sayfalarında çalışmasını sağlar\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // PUBLIC_URL farklı bir originden geliyorsa, service worker çalışmaz\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // Localhost'tayız. SW'nin hala var olup olmadığını kontrol edelim\n        checkValidServiceWorker(swUrl, config);\n\n        // Console'a ek bilgiler ekle\n        navigator.serviceWorker.ready.then(() => {\n          console.log('Bu web uygulaması ilk önce önbelleğe alınmakta ve ' + 'daha sonra service worker tarafından sunulmaktadır.');\n        });\n      } else {\n        // Localhost değiliz. Sadece service worker'ı kaydet\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // Bu noktada önceden önbelleğe alınmış içerik vardır\n            console.log('Yeni içerik kullanılabilir, lütfen sayfayı yenileyin.');\n\n            // Callback'i çağır\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // Bu noktada her şey önbelleğe alınmıştır\n            console.log('İçerik çevrimdışı kullanım için önbelleğe alındı.');\n\n            // Callback'i çağır\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Service worker kaydı sırasında hata oluştu:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Service worker'ın bulunup bulunmadığını kontrol et\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // JS dosyasının alınabildiğinden emin ol\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // Service worker bulunamadı. Muhtemelen farklı bir uygulama.\n      // Sayfayı yenile.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker bulundu. Normal şekilde devam et.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('İnternet bağlantısı yok. Uygulama çevrimdışı modda çalışıyor.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["C:/Users/veyse/OneDrive/Masaüstü/İSİM/src/serviceWorkerRegistration.js"],"sourcesContent":["// Bu isteğe bağlı kod service worker kullanarak uygulama içeriğinizi daha hızlı \r\n// yüklemeye, ayrıca çevrimdışı yetenekler de eklemeye yardımcı olur.\r\n// Ancak bu yaklaşım bazı tuzakları da beraberinde getirir; service worker'ların\r\n// yaşam döngüsü tam olarak anlaşılmazsa çalışma zamanı hatalarına neden olabilir.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] localhost için IPv6 adresidir.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 localhost için özel IPv4 adresi kabul edilir.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // URL constructor, SW'nin https sayfalarında çalışmasını sağlar\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // PUBLIC_URL farklı bir originden geliyorsa, service worker çalışmaz\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // Localhost'tayız. SW'nin hala var olup olmadığını kontrol edelim\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Console'a ek bilgiler ekle\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'Bu web uygulaması ilk önce önbelleğe alınmakta ve ' +\r\n              'daha sonra service worker tarafından sunulmaktadır.'\r\n          );\r\n        });\r\n      } else {\r\n        // Localhost değiliz. Sadece service worker'ı kaydet\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // Bu noktada önceden önbelleğe alınmış içerik vardır\r\n              console.log(\r\n                'Yeni içerik kullanılabilir, lütfen sayfayı yenileyin.'\r\n              );\r\n\r\n              // Callback'i çağır\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // Bu noktada her şey önbelleğe alınmıştır\r\n              console.log('İçerik çevrimdışı kullanım için önbelleğe alındı.');\r\n\r\n              // Callback'i çağır\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Service worker kaydı sırasında hata oluştu:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Service worker'ın bulunup bulunmadığını kontrol et\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // JS dosyasının alınabildiğinden emin ol\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // Service worker bulunamadı. Muhtemelen farklı bir uygulama.\r\n        // Sayfayı yenile.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker bulundu. Normal şekilde devam et.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('İnternet bağlantısı yok. Uygulama çevrimdışı modda çalışıyor.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}