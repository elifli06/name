import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { LanguageIcon, SunIcon, MoonIcon, DocumentArrowDownIcon } from '@heroicons/react/24/outline';
import IntroAnimation from './components/IntroAnimation';
import NameSuggestions, { NameAnalysisBoxes } from './components/NameSuggestions';
import DailyHoroscope from './components/DailyHoroscope';
import './App.css';
import { nameCharacteristics, getNameInfo } from './data/nameCharacteristics';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';

function App() {
  const [showIntro, setShowIntro] = useState(true);
  const [language, setLanguage] = useState('tr');
  const [searchTerm, setSearchTerm] = useState('');
  const [result, setResult] = useState(null);
  const [analyzing, setAnalyzing] = useState(false);
  const [exitAnimation, setExitAnimation] = useState(false);
  const [showHoroscopePrompt, setShowHoroscopePrompt] = useState(false);
  const [showHoroscope, setShowHoroscope] = useState(false);
  const [darkTheme, setDarkTheme] = useState(true); // Varsayılan olarak koyu tema
  const resultRef = useRef(null);
  
  // Ses efektleri
  const hoverSound = new Audio('/assets/hover.mp3');
  const clickSound = new Audio('/assets/click.mp3');
  const backgroundMusic = new Audio('/assets/mystical-background.mp3.mp3');
  backgroundMusic.loop = true;
  backgroundMusic.volume = 0.3;

  const translations = {
    tr: {
      title: 'Nomen Est Omen',
      subtitle: 'İsminizin Sırrını Keşfedin',
      searchPlaceholder: 'İsminizi girin...',
      analyze: 'Analiz Et',
      share: 'Paylaş',
      language: 'Dil',
      characteristics: 'Karakter Özellikleri',
      energy: 'Enerji Seviyesi',
      compatibility: 'Uyumluluk',
      suggestions: 'İsim Önerileri',
      exit: 'Çıkış',
      exitMessage: 'Uygulama kapatılıyor...',
      goodbye: 'kendine iyi bak. Herşey gönlünce olsun, sen değerlisin. Hoşçakal!',
      horoscopePrompt: 'Günlük burç yorumuna da bakmak ister misiniz?',
      yes: 'Evet',
      no: 'Hayır'
    },
    en: {
      title: 'Nomen Est Omen',
      subtitle: 'Discover the Secret of Your Name',
      searchPlaceholder: 'Enter your name...',
      analyze: 'Analyze',
      share: 'Share',
      language: 'Language',
      characteristics: 'Character Traits',
      energy: 'Energy Level',
      compatibility: 'Compatibility',
      suggestions: 'Name Suggestions',
      exit: 'Exit',
      exitMessage: 'Closing the application...',
      goodbye: 'take care of yourself. May everything go well for you, you are valuable. Goodbye!',
      horoscopePrompt: 'Would you also like to check your daily horoscope?',
      yes: 'Yes',
      no: 'No'
    }
  };

  const themes = {
    dark: {
      background: 'bg-[#0A0B1A]',
      primaryBg: 'bg-midnight-default/40',
      secondaryBg: 'bg-midnight-light/30',
      inputBg: 'bg-midnight-light/20',
      text: 'text-gold-light',
      accentText: 'text-gold-default',
      border: 'border-gold-default/50',
      lightBorder: 'border-gold/20'
    },
    light: {
      background: 'bg-[#FFF8E7]',
      primaryBg: 'bg-[#FFFBF2]/80',
      secondaryBg: 'bg-[#FFF1D6]/70',
      inputBg: 'bg-[#FFFFFF]',
      text: 'text-[#725A38]',
      accentText: 'text-[#B8860B]',
      border: 'border-[#D4AF37]/60',
      lightBorder: 'border-[#D4AF37]/30'
    }
  };

  const currentTheme = darkTheme ? themes.dark : themes.light;

  // Türk erkek ve kadın isimleri listesi
  const turkishMaleNames = [
    'semih', // Semih'i listenin en başına koyuyorum
    'ahmet', 'ali', 'arif', 'ayhan', 'baran', 'burak', 'can', 'cem', 'cenk', 'cihan', 
    'deniz', 'emre', 'enes', 'ercan', 'erdem', 'eren', 'erkan', 'erol', 'ferhat', 'gökhan', 
    'hakan', 'halil', 'hasan', 'hüseyin', 'ibrahim', 'ilhan', 'ismail', 'kemal', 'kerem', 
    'koray', 'levent', 'mahmut', 'mehmet', 'melih', 'mert', 'mesut', 'murat', 'mustafa', 
    'necati', 'oguz', 'oktay', 'onur', 'orhan', 'osman', 'ömer', 'özcan', 'recep', 'rıza', 
    'selim', 'serkan', 'serhat', 'sinan', 'tahsin', 'talha', 'tayfun', 'tolga', 
    'tuncay', 'turgut', 'ufuk', 'umut', 'ünal', 'volkan', 'yakup', 'yalçın', 'yaşar', 
    'yavuz', 'yunus', 'yusuf', 'zafer'
  ];

  const turkishFemaleNames = [
    'aylin', 'ayla', 'aysel', 'ayşe', 'bahar', 'belgin', 'belma', 'berna', 'betül', 'burcu', 
    'canan', 'ceren', 'ceyda', 'çiğdem', 'deniz', 'derya', 'didem', 'dilek', 'ebru', 'eda', 
    'elif', 'emel', 'emine', 'esra', 'fatma', 'feride', 'figen', 'filiz', 'gamze', 'gizem', 
    'gökçe', 'gül', 'gülşen', 'gülşah', 'hale', 'handan', 'havva', 'hatice', 'hülya', 'ipek', 
    'irmak', 'jale', 'kader', 'leyla', 'mehtap', 'melek', 'meltem', 'meral', 'merve', 'nalan', 
    'nazlı', 'necla', 'nergis', 'nermin', 'nil', 'nilay', 'nilgün', 'nuray', 'özge', 'özlem', 
    'pembe', 'pınar', 'rabia', 'rüya', 'safiye', 'selda', 'selma', 'sema', 'semra', 'seval', 
    'sevda', 'sevgi', 'sevim', 'sevinç', 'sibel', 'sonay', 'şenay', 'şule', 'tuba', 'tülay', 
    'türkan', 'ümran', 'yasemin', 'yeşim', 'yıldız', 'zehra', 'zeynep', 'zübeyde', 'zühal'
  ];

  useEffect(() => {
    const timer = setTimeout(() => {
      setShowIntro(false);
    }, 6000);
    
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (exitAnimation) {
      const timer = setTimeout(() => {
        window.close();
        // Eğer window.close() tarayıcı tarafından engellendiyse, kullanıcıya bir mesaj göster
        setTimeout(() => {
          setExitAnimation(false);
          alert(language === 'tr' ? 'Tarayıcınız otomatik kapatmaya izin vermiyor. Pencereyi manuel olarak kapatabilirsiniz.' : 
                                   'Your browser does not allow automatic closing. You can close the window manually.');
        }, 3000);
      }, 5500);
      
      return () => clearTimeout(timer);
    }
  }, [exitAnimation, language]);

  // Ses çalmak için fonksiyonlar
  const playHoverSound = () => {
    hoverSound.currentTime = 0;
    hoverSound.play().catch(e => console.log("Hover ses çalma hatası:", e));
  };

  const playClickSound = () => {
    clickSound.currentTime = 0;
    clickSound.play().catch(e => console.log("Click ses çalma hatası:", e));
  };

  // Arkaplan müziği için useEffect
  useEffect(() => {
    const playBackgroundMusic = () => {
      backgroundMusic.play().catch(e => console.log("Arkaplan müziği çalma hatası:", e));
    };

    window.addEventListener('click', playBackgroundMusic, { once: true });
    
    return () => {
      window.removeEventListener('click', playBackgroundMusic);
      backgroundMusic.pause();
    };
  }, []);

  const handleSearch = () => {
    playClickSound(); // Arama butonuna tıklandığında ses çal
    
    if (!searchTerm.trim() || analyzing) return;
    
    // İsim geçerlilik kontrolü (sadece harf karakterleri ve minimum/maksimum uzunluk)
    const nameValidationRegex = /^[a-zA-ZğüşıöçĞÜŞİÖÇ\s]+$/;
    const trimmedName = searchTerm.trim();
    
    if (!nameValidationRegex.test(trimmedName)) {
      alert(language === 'tr' 
        ? 'Lütfen geçerli bir isim giriniz. İsimler sadece harf karakterlerinden oluşmalıdır.' 
        : 'Please enter a valid name. Names should contain only letter characters.');
      return;
    }
    
    if (trimmedName.length < 2) {
      alert(language === 'tr' 
        ? 'İsim en az 2 karakter olmalıdır.' 
        : 'Name should be at least 2 characters.');
      return;
    }
    
    if (trimmedName.length > 30) {
      alert(language === 'tr' 
        ? 'İsim en fazla 30 karakter olmalıdır.' 
        : 'Name should not exceed 30 characters.');
      return;
    }
    
    // Intro animasyonunu kısa süreliğine göster
    setShowIntro(true);
    setTimeout(() => {
      setShowIntro(false);
    }, 3000);
    
    // Analiz ediliyor durumunu aktifleştir
    setAnalyzing(true);
    
    const firstLetter = trimmedName[0].toLowerCase();
    
    // İsmin ilk harfine göre uyumlu harfler belirleme
    const getCompatibleLetters = (letter) => {
      const compatibilityMap = {
        a: ['E', 'L', 'R'],
        b: ['A', 'T', 'M'],
        c: ['K', 'S', 'Z'],
        ç: ['A', 'E', 'İ'],
        d: ['E', 'İ', 'Y'],
        e: ['A', 'L', 'R'],
        f: ['A', 'E', 'İ'],
        g: ['Ü', 'Z', 'E'],
        h: ['A', 'İ', 'Y'],
        ı: ['K', 'M', 'N'],
        i: ['L', 'M', 'S'],
        j: ['A', 'U', 'L'],
        k: ['A', 'E', 'R'],
        l: ['A', 'E', 'İ'],
        m: ['E', 'H', 'T'],
        n: ['A', 'E', 'İ'],
        o: ['R', 'K', 'A'],
        ö: ['Z', 'G', 'N'],
        p: ['E', 'İ', 'N'],
        r: ['A', 'E', 'İ'],
        s: ['A', 'E', 'İ'],
        ş: ['A', 'E', 'İ'],
        t: ['A', 'E', 'İ'],
        u: ['R', 'Ğ', 'L'],
        ü: ['M', 'İ', 'T'],
        v: ['E', 'Y', 'S'],
        y: ['A', 'İ', 'E'],
        z: ['E', 'Y', 'N']
      };
      
      return compatibilityMap[letter] || ['A', 'E', 'İ']; // Varsayılan harfler
    };
    
    // 5 saniyelik gecikme ile analiz sonucunu göster
    setTimeout(() => {
      // İsmin cinsiyetini belirleme
      const lowerName = trimmedName.toLowerCase();
      console.log("Aranan isim:", lowerName);
      
      // SEMİH İSMİ İÇİN TAMAMEN ÖZEL DURUMU İŞLE - DİĞER KODLAR YERİNE GEÇİRİLECEK
      if (lowerName === 'semih' || lowerName.includes('semih')) {
        console.log("*** SEMİH ERKEK İSMİ TESPİT EDİLDİ - ÖZEL DURUM ÇALIŞTI ***");
        
        // Sabit, özel erkek sonucu
        setResult({
          name: trimmedName,
          gender: "male", // ERKEK yerine male kullanıyoruz
          characteristics: {
            description: language === 'tr' 
              ? "Semih erkek ismidir. Cömert ve eli açık anlamına gelir. Bu ismi taşıyan kişilerin güçlü karakterlere, analitik düşünme yeteneğine ve dürüstlüğe sahip olduklarını gösterir."
              : "Semih is a male name. It means generous, openhanded. This name indicates that the bearer has a strong character, analytical thinking ability, and honesty.",
            traits: ['E', 'M', 'R'],
            gender: "male" // ERKEK yerine male kullanıyoruz
          },
          energy: 85,
          isMale: true // Ekstra özelliği koruyoruz
        });
        
        // Analiz durumunu kapat
        setAnalyzing(false);
        // Analiz tamamlandığında burç yorumu promptunu göster
        setShowHoroscopePrompt(true);
        return; // Diğer kodların çalışmasını engelle
      }
      
      // Normal isim işleme süreci - Tüm isimler lowercase olarak karşılaştırılıyor
      let gender = null;
      // Her bir erkek ismini küçük harfe dönüştürerek karşılaştır
      if (turkishMaleNames.some(name => name.toLowerCase() === lowerName)) {
        console.log("Erkek ismi tespit edildi:", lowerName);
        gender = 'male';
      } else if (turkishFemaleNames.some(name => name.toLowerCase() === lowerName)) {
        console.log("Kadın ismi tespit edildi:", lowerName);
        gender = 'female';
      }
      
      // İsmin ilk harfi mevcut karakteristik sözlüğünde varsa
      if (nameCharacteristics[firstLetter]) {
        let description = nameCharacteristics[firstLetter];
        
        // Cinsiyet belirlenebildiyse, açıklamayı güncelle
        if (gender === 'male') {
          description = language === 'tr' 
            ? `${trimmedName}, bir erkek ismi olarak ${description.toLowerCase()}` 
            : `${trimmedName}, as a male name, ${description.toLowerCase()}`;
        } else if (gender === 'female') {
          description = language === 'tr' 
            ? `${trimmedName}, bir kadın ismi olarak ${description.toLowerCase()}` 
            : `${trimmedName}, as a female name, ${description.toLowerCase()}`;
        }
        
        setResult({
          name: trimmedName,
          characteristics: {
            description: description,
            traits: getCompatibleLetters(firstLetter),
            gender: gender // cinsiyet bilgisini ekle
          },
          energy: Math.floor(Math.random() * 41) + 60, // 60-100 arası rastgele enerji
          gender: gender // sonuç nesnesine de cinsiyet bilgisi ekle
        });
      } else {
        setResult({
          name: trimmedName,
          message: language === 'tr' ? 'Bu isim veritabanımızda bulunmamaktadır.' : 'This name is not in our database.'
        });
      }
      
      // Analiz durumunu kapat
      setAnalyzing(false);
      // Analiz tamamlandığında burç yorumu promptunu göster
      setShowHoroscopePrompt(true);
    }, 5000);
    
  };

  const handleExit = () => {
    playClickSound(); // Çıkış butonuna tıklandığında ses çal
    setExitAnimation(true);
  };

  const handleShare = async (platform) => {
    const shareText = language === 'tr' 
      ? `${result.name} isminin analizi:\n${result.characteristics.description}\n\nUyumlu Harfler: ${result.characteristics.traits.join(', ')}`
      : `Analysis of the name ${result.name}:\n${result.characteristics.description}\n\nCompatible Letters: ${result.characteristics.traits.join(', ')}`;
    
    const shareUrl = window.location.href;
    const shareTitle = language === 'tr' ? 'İsim Analizi' : 'Name Analysis';

    switch(platform) {
      case 'whatsapp':
        window.open(`https://wa.me/?text=${encodeURIComponent(shareText)}`, '_blank');
        break;
      case 'facebook':
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`, '_blank');
        break;
      case 'linkedin':
        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(shareTitle)}&summary=${encodeURIComponent(shareText)}`, '_blank');
        break;
      case 'instagram':
        // Instagram doğrudan paylaşım API'si olmadığı için kopyala-yapıştır yöntemi
        navigator.clipboard.writeText(shareText);
        alert(language === 'tr' ? 'Instagram için metin kopyalandı. Şimdi Instagram\'a gidip yapıştırabilirsiniz!' : 'Text copied for Instagram. Now you can go to Instagram and paste it!');
        break;
      case 'native':
        if (navigator.share) {
          try {
            await navigator.share({
              title: shareTitle,
              text: shareText,
              url: shareUrl
            });
          } catch (err) {
            console.log('Paylaşım iptal edildi');
          }
        } else {
          navigator.clipboard.writeText(shareText);
          alert(language === 'tr' ? 'Sonuçlar panoya kopyalandı!' : 'Results copied to clipboard!');
        }
        break;
      default:
        navigator.clipboard.writeText(shareText);
        alert(language === 'tr' ? 'Sonuçlar panoya kopyalandı!' : 'Results copied to clipboard!');
    }
  };

  const toggleTheme = () => {
    playClickSound(); // Tema değiştirme butonuna tıklandığında ses çal
    setDarkTheme(prev => !prev);
  };

  // PDF olarak indir
  const downloadPDF = async () => {
    if (resultRef.current) {
      try {
        const canvas = await html2canvas(resultRef.current, {
          scale: 2,
          backgroundColor: darkTheme ? '#0A0B1A' : '#F5F3EB',
          logging: false,
          useCORS: true
        });
        
        const imgData = canvas.toDataURL('image/jpeg', 1.0);
        const pdf = new jsPDF({
          orientation: 'portrait',
          unit: 'mm',
          format: 'a4'
        });
        
        const imgWidth = 210; 
        const imgHeight = canvas.height * imgWidth / canvas.width;
        
        pdf.addImage(imgData, 'JPEG', 0, 0, imgWidth, imgHeight);
        pdf.save(`${searchTerm}_isim_analizi.pdf`);
        
        alert(language === 'tr' 
          ? 'İsim analizi PDF olarak indirildi!' 
          : 'Name analysis has been downloaded as PDF!');
      } catch (error) {
        console.error('PDF indirme hatası:', error);
        alert(language === 'tr' 
          ? 'PDF indirme sırasında bir hata oluştu. Lütfen tekrar deneyin.' 
          : 'An error occurred while downloading the PDF. Please try again.');
      }
    }
  };

  // Promptu kapatmak için
  const handleHoroscopePromptClose = (choice) => {
    setShowHoroscopePrompt(false);
    if (choice === 'yes') {
      setShowHoroscope(true);
    }
  };

  // Burç yorumu modalini kapatmak için
  const handleHoroscopeClose = () => {
    setShowHoroscope(false);
  };

  const toggleLanguage = () => {
    playClickSound(); // Dil değiştirme butonuna tıklandığında ses çal
    setLanguage(prev => prev === 'tr' ? 'en' : 'tr');
  };

  return (
    <div className={`min-h-screen overflow-hidden transition-colors duration-500 ${currentTheme.background} relative`}>
      {/* Arka plan minik rastgele yıldızlar */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none z-0">
        {[...Array(50)].map((_, i) => (
          <motion.div
            key={i}
            initial={{ opacity: 0 }}
            animate={{ opacity: [0.2, 0.8, 0.2] }}
            transition={{
              duration: 3 + Math.random() * 3,
              repeat: Infinity,
              delay: Math.random() * 5,
            }}
            className="absolute w-1 h-1 bg-gold-light rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              boxShadow: '0 0 3px 1px rgba(255, 215, 0, 0.3)'
            }}
          />
        ))}
      </div>

      {/* Sabit Çıkış Butonu */}
      <motion.button
        className="fixed z-50 bottom-5 right-5 w-12 h-12 bg-midnight-light/40 hover:bg-midnight-light/60 backdrop-blur-sm text-gold-default rounded-full flex items-center justify-center border border-gold-default/30 hover:border-gold-default/80 shadow-lg hover:shadow-gold-default/20 transition-all"
        whileHover={{ scale: 1.1, rotate: 5 }}
        whileTap={{ scale: 0.95 }}
        onClick={handleExit}
        title={language === 'tr' ? 'Çıkış' : 'Exit'}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
        </svg>
      </motion.button>

      {/* Çıkış animasyonu */}
      <AnimatePresence>
        {exitAnimation && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-midnight-default z-50 flex flex-col items-center justify-center"
          >
            <motion.h2
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.5, duration: 0.8 }}
              className="text-3xl font-cinzel text-gold-default mb-8"
            >
              {translations[language].exitMessage}
            </motion.h2>
            
            <motion.p
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 1.5, duration: 1 }}
              className="text-xl font-cormorant text-gold-light text-center max-w-md px-4"
            >
              {translations[language].goodbye}
            </motion.p>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Giriş animasyonu */}
      <AnimatePresence>
        {showIntro && <IntroAnimation />}
      </AnimatePresence>

      {/* Ana içerik */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: showIntro ? 0 : 1 }}
        transition={{ duration: 1 }}
        className="container mx-auto px-4 py-12 relative z-10"
      >
        {/* Melek Emojisi */}
        <div className="floating-angel">👼</div>
        
        {/* Burç yorumu prompt'u - Sol alt köşeye taşındı */}
        <AnimatePresence>
          {showHoroscopePrompt && (
            <motion.div
              initial={{ opacity: 0, y: 100 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 100 }}
              className="fixed bottom-16 left-4 z-40 max-w-xs"
            >
              <motion.div
                initial={{ scale: 0.9 }}
                animate={{ scale: 1 }}
                exit={{ scale: 0.9 }}
                className={`${currentTheme.secondaryBg} backdrop-blur-md border ${currentTheme.border} rounded-lg p-4 text-center shadow-lg shadow-gold-default/10`}
              >
                {/* Mum efektleri */}
                <motion.span 
                  className={`absolute -top-5 -left-3 text-xl ${currentTheme.accentText}`}
                  animate={{
                    opacity: [0.4, 1, 0.4],
                    scale: [0.95, 1.05, 0.95]
                  }}
                  transition={{
                    duration: 2,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                >
                  🕯️
                </motion.span>
                <motion.span 
                  className={`absolute -top-5 -right-3 text-xl ${currentTheme.accentText}`}
                  animate={{
                    opacity: [0.4, 1, 0.4],
                    scale: [0.95, 1.05, 0.95]
                  }}
                  transition={{
                    duration: 2,
                    delay: 0.5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                >
                  🕯️
                </motion.span>
                
                <h3 className={`text-lg font-cinzel ${currentTheme.accentText} mb-3`}>
                  <span className={currentTheme.text}>{result.name},</span> {translations[language].horoscopePrompt}
                </h3>
                <div className="flex justify-center gap-3 mt-4">
                  <button
                    onClick={() => handleHoroscopePromptClose('yes')}
                    className={`px-5 py-2 ${darkTheme ? 'bg-gold-default/30 hover:bg-gold-default/40' : 'bg-[#9C7A3C]/30 hover:bg-[#9C7A3C]/40'} ${currentTheme.text} rounded-lg transition-all duration-300 border ${currentTheme.border}`}
                  >
                    {translations[language].yes}
                  </button>
                  <button
                    onClick={() => handleHoroscopePromptClose('no')}
                    className={`px-5 py-2 ${darkTheme ? 'bg-midnight-default/50 hover:bg-midnight-default/70' : 'bg-[#FFF5E0]/80 hover:bg-[#FFF5E0]'} ${currentTheme.text} opacity-80 rounded-lg transition-all duration-300 border ${currentTheme.lightBorder}`}
                  >
                    {translations[language].no}
                  </button>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Burç yorumu modalı */}
        <AnimatePresence>
          {showHoroscope && (
            <DailyHoroscope 
              name={result.name}
              language={language}
              onClose={handleHoroscopeClose}
              darkTheme={darkTheme}
            />
          )}
        </AnimatePresence>

        {/* Değerlendirme ve PDF indirme bölümleri - Sağ Kenar yan yana */}
        {result && !analyzing && (
          <div className="fixed bottom-20 right-0 z-50 flex flex-row-reverse">
            {/* Değerlendirme Bölümü */}
            <motion.div
              initial={{ opacity: 0, scale: 0.5, x: 100 }}
              animate={{ opacity: 1, scale: 1, x: 0 }}
              whileHover={{ x: -5 }}
              className={`${darkTheme ? 'bg-midnight-default/70' : 'bg-[#FFF1D6]/95'} backdrop-blur-md p-3 rounded-l-lg border border-r-0 ${currentTheme.border} shadow-lg shadow-gold-default/20 max-w-xs`}
            >
              {/* Mum efektleri */}
              <motion.span 
                className={`absolute -top-6 -left-3 text-xl ${currentTheme.accentText}`}
                animate={{
                  opacity: [0.4, 1, 0.4],
                  scale: [0.95, 1.05, 0.95]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                🕯️
              </motion.span>
              
              <h3 className="text-md font-cinzel text-gold-default mb-2 text-center">
                {language === 'tr' ? 'Analizi Değerlendir' : 'Rate this Analysis'}
              </h3>
              
              <div className="flex justify-center mb-3">
                {[1, 2, 3, 4, 5].map((star) => (
                  <button
                    key={star}
                    onClick={() => {
                      alert(language === 'tr' 
                        ? `Değerlendirmeniz için teşekkürler! ${star}/5 puan verdiniz.` 
                        : `Thank you for your rating! You gave ${star}/5 stars.`);
                    }}
                    className="mx-1 text-2xl transition-all duration-300 hover:scale-125 focus:outline-none"
                    title={`${star} ${language === 'tr' ? 'Yıldız' : 'Star'}`}
                  >
                    <motion.span
                      animate={{
                        textShadow: [
                          "0 0 5px rgba(255, 215, 0, 0.3)",
                          "0 0 15px rgba(255, 215, 0, 0.7)",
                          "0 0 5px rgba(255, 215, 0, 0.3)"
                        ]
                      }}
                      transition={{
                        duration: 2 + (star * 0.3),
                        repeat: Infinity,
                        ease: "easeInOut"
                      }}
                      className="text-gold-default/70 hover:text-gold-default"
                    >
                      ★
                    </motion.span>
                  </button>
                ))}
              </div>
              
              <p className="text-gold-light/80 text-xs text-center">
                {language === 'tr' 
                  ? 'Görüş ve önerileriniz için: ' 
                  : 'For feedback and suggestions: '}
                <a 
                  href="mailto:ceravelif@gmail.com" 
                  className="text-gold-default hover:underline transition-all hover:text-gold-light"
                >
                  ceravelif@gmail.com
                </a>
              </p>
            </motion.div>

            {/* PDF İndirme ve Paylaşım Bölümü */}
            <motion.div
              initial={{ opacity: 0, scale: 0.5, x: 100 }}
              animate={{ opacity: 1, scale: 1, x: 0 }}
              whileHover={{ x: -5 }}
              className={`${darkTheme ? 'bg-midnight-default/70' : 'bg-[#FFF1D6]/95'} backdrop-blur-md p-3 rounded-l-lg border border-r-0 mr-2 ${currentTheme.border} shadow-lg shadow-gold-default/20`}
            >
              {/* Mum efektleri */}
              <motion.span 
                className={`absolute -top-6 -left-3 text-xl ${currentTheme.accentText}`}
                animate={{
                  opacity: [0.4, 1, 0.4],
                  scale: [0.95, 1.05, 0.95]
                }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                🕯️
              </motion.span>
              
              {/* PDF İndirme Butonu */}
              <motion.button
                onClick={downloadPDF}
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.95 }}
                className={`flex items-center gap-2 ${darkTheme ? 'bg-gold-default/20 hover:bg-gold-default/30' : 'bg-[#D4AF37]/20 hover:bg-[#D4AF37]/30'} ${currentTheme.text} px-3 py-2 rounded-full transition-all duration-300 border ${currentTheme.lightBorder} mb-3`}
                title={language === 'tr' ? 'PDF olarak indir' : 'Download PDF'}
              >
                <DocumentArrowDownIcon className="w-5 h-5" />
                <span className="text-sm font-cinzel">{language === 'tr' ? 'PDF İndir' : 'Download PDF'}</span>
              </motion.button>

              {/* Paylaşım Başlığı */}
              <div className="w-full text-center mt-2">
                <div className="flex items-center justify-center mb-1">
                  <div className="h-px w-4 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                  <span className={`mx-1 text-xs ${currentTheme.accentText}`}>✧</span>
                  <div className="h-px w-4 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                </div>
                <p className={`text-xs font-cinzel ${currentTheme.accentText}`}>
                  {language === 'tr' ? 'Paylaş' : 'Share'}
                </p>
              </div>
              
              {/* Sosyal Medya Butonları */}
              <div className="flex justify-center gap-2 mt-2">
                {/* WhatsApp */}
                <motion.button
                  onClick={() => handleShare('whatsapp')}
                  whileHover={{ y: -2, scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center p-1.5 bg-[#25D366]/20 hover:bg-[#25D366]/30 rounded-full transition-all"
                  title="WhatsApp"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#25D366]">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                  </svg>
                </motion.button>
                
                {/* Facebook */}
                <motion.button
                  onClick={() => handleShare('facebook')}
                  whileHover={{ y: -2, scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center p-1.5 bg-[#3b5998]/20 hover:bg-[#3b5998]/30 rounded-full transition-all"
                  title="Facebook"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#3b5998]">
                    <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                  </svg>
                </motion.button>
                
                {/* LinkedIn */}
                <motion.button
                  onClick={() => handleShare('linkedin')}
                  whileHover={{ y: -2, scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center p-1.5 bg-[#0077b5]/20 hover:bg-[#0077b5]/30 rounded-full transition-all"
                  title="LinkedIn"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#0077b5]">
                    <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                  </svg>
                </motion.button>
                
                {/* Instagram */}
                <motion.button
                  onClick={() => handleShare('instagram')}
                  whileHover={{ y: -2, scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center p-1.5 bg-[#E1306C]/20 hover:bg-[#E1306C]/30 rounded-full transition-all"
                  title="Instagram (Kopyala)"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#E1306C]">
                    <path d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z"/>
                  </svg>
                </motion.button>
                
                {/* Native Share */}
                <motion.button
                  onClick={() => handleShare('native')}
                  whileHover={{ y: -2, scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className={`flex items-center justify-center p-1.5 ${darkTheme ? 'bg-gold-default/20 hover:bg-gold-default/30' : 'bg-[#D4AF37]/20 hover:bg-[#D4AF37]/30'} rounded-full transition-all`}
                  title={language === 'tr' ? 'Paylaş' : 'Share'}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className={`w-4 h-4 ${darkTheme ? 'fill-gold-default' : 'fill-[#B8860B]'}`}>
                    <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
                  </svg>
                </motion.button>
              </div>
            </motion.div>
          </div>
        )}

        <div className="max-w-2xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="bg-midnight/30 backdrop-blur-sm rounded-lg p-4 sm:p-6 border border-gold/20"
          >
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <div className="flex-1 relative">
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  placeholder={translations[language].searchPlaceholder}
                  className="w-full bg-midnight-light/20 border border-gold/20 rounded-lg px-4 py-2 text-gold-light focus:outline-none focus:border-gold/40"
                />
                {searchTerm && (
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      setSearchTerm('');
                    }}
                    className="absolute right-3 top-1/2 -translate-y-1/2 text-gold-light/50 hover:text-gold-default transition-colors"
                    title={language === 'tr' ? 'Temizle' : 'Clear'}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                  </button>
                )}
              </div>
              <div className="flex gap-2">
                <button
                  onClick={handleSearch}
                  disabled={analyzing}
                  className={`flex-1 sm:flex-none bg-gold/20 hover:bg-gold/30 text-gold-light px-6 py-2 rounded-lg transition-all duration-300 ${analyzing ? 'opacity-50 cursor-not-allowed' : ''}`}
                >
                  {translations[language].analyze}
                </button>
                <button
                  onClick={toggleLanguage}
                  className="bg-midnight-light/20 hover:bg-midnight-light/30 text-gold-light p-2 rounded-lg transition-all duration-300"
                >
                  <LanguageIcon className="w-6 h-6" />
                </button>
              </div>
            </div>

            <AnimatePresence>
              {analyzing && (
                <motion.div 
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                  className="mt-10 mb-6 text-center"
                >
                  <h3 className="text-xl font-cinzel text-gold-default mb-4">
                    {searchTerm 
                    ? `${searchTerm}`
                    : (language === 'tr' ? 'İsim bekleniyor...' : 'Waiting for a name...')}
                  </h3>
                </motion.div>
              )}

              {result && !analyzing && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                  className="mt-8 bg-midnight-light/30 backdrop-blur-sm border border-gold-default/30 rounded-lg p-6 max-w-4xl mx-auto relative"
                >
                  {result.message ? (
                    <p className="text-center text-gold-light">{result.message}</p>
                  ) : (
                    <>
                      {/* Paylaşım Butonları - Sabit Sağ Alt Köşede */}
                      <div className="fixed bottom-16 right-4 z-[9999]" style={{display: "none"}}>
                        <motion.div
                          initial={{ opacity: 0, scale: 0.5 }}
                          animate={{ opacity: 1, scale: 1 }}
                          whileHover={{ scale: 1.05 }}
                          className={`${darkTheme ? 'bg-midnight-default/70' : 'bg-[#FFF1D6]/95'} backdrop-blur-md p-3 rounded-lg border ${currentTheme.border} shadow-lg shadow-gold-default/20`}
                        >
                          {/* Mum efektleri */}
                          <motion.span 
                            className={`absolute -top-6 -left-3 text-xl ${currentTheme.accentText}`}
                            animate={{
                              opacity: [0.4, 1, 0.4],
                              scale: [0.95, 1.05, 0.95]
                            }}
                            transition={{
                              duration: 2,
                              repeat: Infinity,
                              ease: "easeInOut"
                            }}
                          >
                            🕯️
                          </motion.span>
                          <motion.span 
                            className={`absolute -top-6 -right-3 text-xl ${currentTheme.accentText}`}
                            animate={{
                              opacity: [0.4, 1, 0.4],
                              scale: [0.95, 1.05, 0.95]
                            }}
                            transition={{
                              duration: 2,
                              delay: 0.5,
                              repeat: Infinity,
                              ease: "easeInOut"
                            }}
                          >
                            🕯️
                          </motion.span>
                          
                          <div className="flex flex-col items-center gap-3">
                            {/* Paylaşım Başlığı */}
                            <div className="w-full text-center">
                              <div className="flex items-center justify-center mb-1">
                                <div className="h-px w-4 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                                <span className={`mx-1 text-xs ${currentTheme.accentText}`}>✧</span>
                                <div className="h-px w-4 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                              </div>
                              <p className={`text-xs font-cinzel ${currentTheme.accentText}`}>
                                {language === 'tr' ? 'Paylaş' : 'Share'}
                              </p>
                            </div>
                            
                            {/* Sosyal Medya Butonları */}
                            <div className="flex justify-center gap-2">
                              {/* WhatsApp */}
                              <motion.button
                                onClick={() => handleShare('whatsapp')}
                                whileHover={{ y: -2, scale: 1.1 }}
                                whileTap={{ scale: 0.95 }}
                                className="flex items-center justify-center p-1.5 bg-[#25D366]/20 hover:bg-[#25D366]/30 rounded-full transition-all"
                                title="WhatsApp"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#25D366]">
                                  <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413z"/>
                                </svg>
                              </motion.button>
                              
                              {/* Facebook */}
                              <motion.button
                                onClick={() => handleShare('facebook')}
                                whileHover={{ y: -2, scale: 1.1 }}
                                whileTap={{ scale: 0.95 }}
                                className="flex items-center justify-center p-1.5 bg-[#3b5998]/20 hover:bg-[#3b5998]/30 rounded-full transition-all"
                                title="Facebook"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#3b5998]">
                                  <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
                                </svg>
                              </motion.button>
                              
                              {/* LinkedIn */}
                              <motion.button
                                onClick={() => handleShare('linkedin')}
                                whileHover={{ y: -2, scale: 1.1 }}
                                whileTap={{ scale: 0.95 }}
                                className="flex items-center justify-center p-1.5 bg-[#0077b5]/20 hover:bg-[#0077b5]/30 rounded-full transition-all"
                                title="LinkedIn"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#0077b5]">
                                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                                </svg>
                              </motion.button>
                              
                              {/* Instagram */}
                              <motion.button
                                onClick={() => handleShare('instagram')}
                                whileHover={{ y: -2, scale: 1.1 }}
                                whileTap={{ scale: 0.95 }}
                                className="flex items-center justify-center p-1.5 bg-[#E1306C]/20 hover:bg-[#E1306C]/30 rounded-full transition-all"
                                title="Instagram (Kopyala)"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className="w-4 h-4 fill-[#E1306C]">
                                  <path d="M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913.306.788.717 1.459 1.384 2.126.667.666 1.336 1.079 2.126 1.384.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558.788-.306 1.459-.718 2.126-1.384.666-.667 1.079-1.335 1.384-2.126.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913-.306-.789-.718-1.459-1.384-2.126C21.319 1.347 20.651.935 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227-.224.562-.479.96-.899 1.382-.419.419-.824.679-1.38.896-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421-.569-.224-.96-.479-1.379-.899-.421-.419-.69-.824-.9-1.38-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678c-3.405 0-6.162 2.76-6.162 6.162 0 3.405 2.76 6.162 6.162 6.162 3.405 0 6.162-2.76 6.162-6.162 0-3.405-2.76-6.162-6.162-6.162zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405c0 .795-.646 1.44-1.44 1.44-.795 0-1.44-.646-1.44-1.44 0-.794.646-1.439 1.44-1.439.793-.001 1.44.645 1.44 1.439z"/>
                                </svg>
                              </motion.button>
                              
                              {/* Native Share */}
                              <motion.button
                                onClick={() => handleShare('native')}
                                whileHover={{ y: -2, scale: 1.1 }}
                                whileTap={{ scale: 0.95 }}
                                className={`flex items-center justify-center p-1.5 ${darkTheme ? 'bg-gold-default/20 hover:bg-gold-default/30' : 'bg-[#D4AF37]/20 hover:bg-[#D4AF37]/30'} rounded-full transition-all`}
                                title={language === 'tr' ? 'Paylaş' : 'Share'}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" className={`w-4 h-4 ${darkTheme ? 'fill-gold-default' : 'fill-[#B8860B]'}`}>
                                  <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
                                </svg>
                              </motion.button>
                            </div>
                          </div>
                        </motion.div>
                      </div>
                      
                      <div ref={resultRef}>
                        <h2 className={`text-2xl font-cinzel ${currentTheme.accentText} text-center mb-4`}>
                          {result.name}
                        </h2>
                        <p className={`mb-6 ${currentTheme.text}`}>
                          {result.characteristics.description}
                        </p>
                        <div className="mt-6">
                          <h3 className={`text-xl font-cinzel ${currentTheme.accentText} mb-2`}>
                            {translations[language].compatibility}
                          </h3>
                          <div className="flex flex-wrap gap-2">
                            {result.characteristics.traits.map(letter => (
                              <span
                                key={letter}
                                className={`${darkTheme ? 'bg-gold-default/20' : 'bg-[#9C7A3C]/20'} ${currentTheme.text} px-3 py-1 rounded-full`}
                              >
                                {letter}
                              </span>
                            ))}
                          </div>
                        </div>
                      </div>
                      
                      {/* İsim Analiz Kutuları */}
                      <NameAnalysisBoxes 
                        name={searchTerm} 
                        language={language} 
                        darkTheme={darkTheme} 
                        currentTheme={currentTheme}
                      />
                      
                      {/* Veda mesajı */}
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 1, duration: 1 }}
                        className="mt-12 text-center"
                      >
                        <motion.div
                          className="p-6 backdrop-blur-md bg-midnight-default/40 border border-gold-default/50 rounded-lg shadow-lg shadow-gold-default/20"
                          animate={{
                            y: [10, 0, 10],
                            boxShadow: [
                              "0 10px 15px -3px rgba(255, 184, 0, 0.1), 0 4px 6px -4px rgba(255, 184, 0, 0.1)",
                              "0 15px 25px -5px rgba(255, 184, 0, 0.2), 0 8px 10px -6px rgba(255, 184, 0, 0.2)",
                              "0 10px 15px -3px rgba(255, 184, 0, 0.1), 0 4px 6px -4px rgba(255, 184, 0, 0.1)"
                            ]
                          }}
                          transition={{
                            repeat: Infinity,
                            duration: 4,
                            ease: "easeInOut"
                          }}
                        >
                          <div className="flex items-center justify-center mb-2">
                            <div className="w-8 h-0.5 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                            <motion.span 
                              className="mx-3 text-gold-default"
                              animate={{ rotate: [0, 360] }}
                              transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                            >
                              ✧
                            </motion.span>
                            <div className="w-8 h-0.5 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                          </div>
                          
                          <motion.p 
                            className="text-gold-light/90 font-cormorant text-xl italic"
                            animate={{ 
                              textShadow: [
                                "0 0 2px rgba(255, 215, 0, 0.3)",
                                "0 0 4px rgba(255, 215, 0, 0.5)",
                                "0 0 2px rgba(255, 215, 0, 0.3)"
                              ]
                            }}
                            transition={{ 
                              repeat: Infinity, 
                              duration: 3,
                              ease: "easeInOut"
                            }}
                          >
                            {searchTerm}, {translations[language].goodbye}
                          </motion.p>
                          
                          <div className="flex items-center justify-center mt-2">
                            <div className="w-8 h-0.5 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                            <motion.span 
                              className="mx-3 text-gold-default"
                              animate={{ rotate: [0, -360] }}
                              transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
                            >
                              ✧
                            </motion.span>
                            <div className="w-8 h-0.5 bg-gradient-to-r from-transparent via-gold-default/50 to-transparent"></div>
                          </div>
                        </motion.div>
                        
                        {/* Çıkış Butonu */}
                        <div className="mt-8 flex justify-center">
                          <motion.button
                            onClick={handleExit}
                            whileHover={{ 
                              scale: 1.05,
                              boxShadow: "0 0 15px rgba(255, 215, 0, 0.5)" 
                            }}
                            whileTap={{ scale: 0.95 }}
                            className="px-6 py-2 rounded-lg bg-midnight-light/40 backdrop-blur-sm border border-gold-default/30 text-gold-light flex items-center gap-2 transition-all duration-300 hover:border-gold-default/70"
                          >
                            <motion.span
                              animate={{ 
                                rotateZ: [0, 10, -10, 0],
                              }}
                              transition={{ 
                                duration: 5, 
                                repeat: Infinity,
                                ease: "easeInOut" 
                              }}
                              className="text-lg"
                            >
                              ✦
                            </motion.span>
                            <span className="font-cinzel">
                              {translations[language].exit}
                            </span>
                            <motion.span
                              animate={{ 
                                rotateZ: [0, -10, 10, 0],
                              }}
                              transition={{ 
                                duration: 5, 
                                repeat: Infinity,
                                ease: "easeInOut" 
                              }}
                              className="text-lg"
                            >
                              ✦
                            </motion.span>
                          </motion.button>
                        </div>
                      </motion.div>
                    </>
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        </div>
      </motion.div>
      
      {/* Footer - Telif Hakkı Bilgisi */}
      <motion.footer 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 0.4 }}
        className="fixed bottom-0 left-0 right-0 text-center py-3 bg-midnight-default/80 backdrop-blur-md border-t border-gold-default/20 z-30"
      >
        <div className="container mx-auto px-4">
          <p className="text-gold-light/70 text-sm font-cinzel flex items-center justify-center gap-2">
            <span className="text-gold-default text-xs">✧</span>
            {language === 'tr' 
              ? 'Created by Elif Cerav © 2025. Tüm hakları saklıdır.' 
              : 'Created by Elif Cerav © 2025. All rights reserved.'}
            <span className="text-gold-default text-xs">✧</span>
          </p>
        </div>
      </motion.footer>
    </div>
  );
}

export default App;

// Created by Elif Cerav 2024. Tüm hakları saklıdır. 